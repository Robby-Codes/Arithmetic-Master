#:import func functionality
#:import NoTransition kivy.uix.screenmanager.NoTransition



WindowManager:
    transition: NoTransition()
    HomeScreen:
    AdditionScreen:
    SubtractionScreen:
    MultiplicationScreen:
    DivisionScreen:

<HomeScreen>:
    name: 'homescreen'

    GridLayout:
        cols: 2

        Button:
            id: addition
            text: '+'
            font_size: 400
            color: (0, 0, 0, 30)
            background_color: (10, 2, 0, 30) if addition.state == 'normal' else (1, 1, 1, 30)
            on_release:
                app.root.current = 'addscreen'

        Button:
            id: subtraction
            text: '-'
            font_size: 600
            color: (0, 0, 0, 30)
            background_color: (10, 2, 0, 30) if subtraction.state == 'normal' else (1, 1, 1, 30)
            on_release:
                app.root.current = 'subscreen'

        Button:
            id: multiplication
            text: 'x'
            font_size: 300
            color: (0, 0, 0, 30)
            background_color: (10, 2, 0, 30) if multiplication.state == 'normal' else (1, 1, 1, 30)
            on_release:
                app.root.current = 'mulscreen'

        Button:
            id: division
            text: '/'
            font_size: 220
            color: (1, 80, 0, 30)
            background_color: (0, 0, 0, 30) if division.state == 'normal' else (1, 1, 1, 30)
            on_release:
                app.root.current = 'divscreen'


<AdditionScreen>:
    name: 'addscreen'

    FloatLayout:
        
        Label:
            canvas:
                Color:
                    rgb: 1, 0.5, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.04
            pos_hint: {'top': 1}

        Label:
            canvas:
                Color:
                    rgb: 0, 0, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.13
            pos_hint: {'top': 0.96}

        Label:
            canvas:
                Color:
                    rgb: 0.3, 0.3, 0.3, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.83
            pos_hint: {'top': 0.83}

        Label:
            canvas:
                Color:
                    rgb: 0.8, 0.8, 0.8, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.02, 0.03
            pos_hint: {'top': 0.88, 'x': 0.69}

        Label:
            canvas:
                Color:
                    rgb: 0.2, 0.2, 0.2, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.3, 0.83
            pos_hint: {'x': 0}

        Label:
            canvas:
                Color:
                    rgb: 0.2, 0.2, 0.2, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.3, 0.83
            pos_hint: {'x': 0.7}

        Label:
            canvas:
                Color:
                    rgb: 0, 0, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.1
            pos_hint: {'x': 0}

        Label: 
            text: 'Addition Training'
            font_size: 20
            color: 0, 0, 0, 1
            size_hint: 1, 0.04
            text_size: self.size
            halign: 'left'
            valign: 'bottom'
            pos_hint: {'top': 1}

        Label:
            text: 'Minimum'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.95, 'x': 0.04}

        TextInput:
            id: add_min
            multiline: False
            text: '0'
            size_hint: 0.3, 0.05
            pos_hint: {'top': 0.95, 'x': 0.19}
            on_text:
                addproblem.text = func.prepare_data(min_=int(add_min.text), type_='+') if func.custom_min(min_=add_min.text) else func.error_message()

        Label:
            text: 'Maximum'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.95, 'x': 0.54}

        TextInput:
            id: add_max
            multiline: False
            text: '100'
            size_hint: 0.3, 0.05
            pos_hint: {'top': 0.95, 'x': 0.69}
            on_text:
                addproblem.text = func.prepare_data(max_=int(add_max.text), type_='+') if func.custom_max(max_=add_max.text) else func.error_message()
        
        Label:
            text: 'Decimals'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.89, 'x': 0.04}

        TextInput:
            id: add_deci
            multiline: False
            text: '0'
            size_hint: 0.3, 0.05
            pos_hint: {'top': 0.89, 'x': 0.19}
            on_text: 
                addproblem.text = func.prepare_data(deci=int(add_deci.text), type_='+') if func.custom_deci(deci=add_deci.text) else func.error_message()
            
        Label:
            text: 'Negatives'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.89, 'x': 0.54}

        CheckBox:
            id: add_negs
            size_hint: 0.02, 0.03
            pos_hint: {'top': 0.88, 'x': 0.69}
            on_active:
                addproblem.text = func.prepare_data(neg=add_negs.active, type_='+')
        
        Label:
            id: addproblem
            text: func.prepare_data(key=True, type_='+')
            font_size: 50
            size_hint: 0.4, 0.4
            pos_hint: {'top': 0.85, 'x': 0.29}
        
        TextInput:
            id: add_answer
            multiline: False
            size_hint: 0.4, 0.15
            pos_hint: {'top': 0.4, 'x': 0.3}
            on_text:
                addproblem.text, add_answer.text = func.prepare_data(type_='+') if func.answer(user_ans=add_answer.text, problem=addproblem.text) and add_answer.text != '' else addproblem.text, '' if func.answer(user_ans=add_answer.text, problem=addproblem.text) else add_answer.text

        Button:
            id: back_btn
            text: 'Home'
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if back_btn.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0}
            on_release:
                app.root.current = 'homescreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                add_answer.text = ''

        Button:
            id: fast_sub
            text: '-'
            font_size: 50
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if fast_sub.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0.7}
            on_release:
                app.root.current = 'subscreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                add_answer.text = ''

        Button:
            id: fast_mult
            text: 'x'
            font_size: 30
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if fast_mult.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0.8}
            on_release:
                app.root.current = 'mulscreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                add_answer.text = ''

        Button:
            id: fast_divi
            text: '/'
            font_size: 30
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if fast_divi.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0.9}
            on_release:
                app.root.current = 'divscreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                add_answer.text = ''

<SubtractionScreen>:
    name: 'subscreen'

    FloatLayout:
        
        Label:
            canvas:
                Color:
                    rgb: 1, 0.5, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.04
            pos_hint: {'top': 1}

        Label:
            canvas:
                Color:
                    rgb: 0, 0, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.13
            pos_hint: {'top': 0.96}

        Label:
            canvas:
                Color:
                    rgb: 0.3, 0.3, 0.3, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.83
            pos_hint: {'top': 0.83}

        Label:
            canvas:
                Color:
                    rgb: 0.8, 0.8, 0.8, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.02, 0.03
            pos_hint: {'top': 0.88, 'x': 0.69}

        Label:
            canvas:
                Color:
                    rgb: 0.2, 0.2, 0.2, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.3, 0.83
            pos_hint: {'x': 0}

        Label:
            canvas:
                Color:
                    rgb: 0.2, 0.2, 0.2, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.3, 0.83
            pos_hint: {'x': 0.7}

        Label:
            canvas:
                Color:
                    rgb: 0, 0, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.1
            pos_hint: {'x': 0}

        Label: 
            text: 'Subtraction Training'
            font_size: 20
            color: 0, 0, 0, 1
            size_hint: 1, 0.04
            text_size: self.size
            halign: 'left'
            valign: 'bottom'
            pos_hint: {'top': 1}

        Label:
            text: 'Minimum'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.95, 'x': 0.04}

        TextInput:
            id: add_min
            multiline: False
            text: '0'
            size_hint: 0.3, 0.05
            pos_hint: {'top': 0.95, 'x': 0.19}
            on_text:
                addproblem.text = func.prepare_data(min_=int(add_min.text), type_='-') if func.custom_min(min_=add_min.text) else func.error_message()

        Label:
            text: 'Maximum'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.95, 'x': 0.54}

        TextInput:
            id: add_max
            multiline: False
            text: '100'
            size_hint: 0.3, 0.05
            pos_hint: {'top': 0.95, 'x': 0.69}
            on_text:
                addproblem.text = func.prepare_data(max_=int(add_max.text), type_='-') if func.custom_max(max_=add_max.text) else func.error_message()
        
        Label:
            text: 'Decimals'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.89, 'x': 0.04}

        TextInput:
            id: add_deci
            multiline: False
            text: '0'
            size_hint: 0.3, 0.05
            pos_hint: {'top': 0.89, 'x': 0.19}
            on_text: 
                addproblem.text = func.prepare_data(deci=int(add_deci.text), type_='-') if func.custom_deci(deci=add_deci.text) else func.error_message()
            
        Label:
            text: 'Negatives'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.89, 'x': 0.54}

        CheckBox:
            id: add_negs
            size_hint: 0.02, 0.03
            pos_hint: {'top': 0.88, 'x': 0.69}
            on_active:
                addproblem.text = func.prepare_data(neg=add_negs.active, type_='-')
        
        Label:
            id: addproblem
            text: func.prepare_data(key=True, type_='-')
            font_size: 50
            size_hint: 0.4, 0.4
            pos_hint: {'top': 0.85, 'x': 0.29}
        
        TextInput:
            id: add_answer
            multiline: False
            size_hint: 0.4, 0.15
            pos_hint: {'top': 0.4, 'x': 0.3}
            on_text:
                addproblem.text, add_answer.text = func.prepare_data(type_='-') if func.answer(user_ans=add_answer.text, problem=addproblem.text) and add_answer.text != '' else addproblem.text, '' if func.answer(user_ans=add_answer.text, problem=addproblem.text) else add_answer.text

        Button:
            id: back_btn
            text: 'Home'
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if back_btn.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0}
            on_release:
                app.root.current = 'homescreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                add_answer.text = ''

        Button:
            id: fast_add
            text: '+'
            font_size: 40
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if fast_add.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0.7}
            on_release:
                app.root.current = 'addscreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                add_answer.text = ''

        Button:
            id: fast_mult
            text: 'x'
            font_size: 30
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if fast_mult.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0.8}
            on_release:
                app.root.current = 'mulscreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                add_answer.text = ''

        Button:
            id: fast_divi
            text: '/'
            font_size: 30
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if fast_divi.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0.9}
            on_release:
                app.root.current = 'divscreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                add_answer.text = ''

<MultiplicationScreen>:
    name: 'mulscreen'

    FloatLayout:
        
        Label:
            canvas:
                Color:
                    rgb: 1, 0.5, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.04
            pos_hint: {'top': 1}

        Label:
            canvas:
                Color:
                    rgb: 0, 0, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.13
            pos_hint: {'top': 0.96}

        Label:
            canvas:
                Color:
                    rgb: 0.3, 0.3, 0.3, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.83
            pos_hint: {'top': 0.83}

        Label:
            canvas:
                Color:
                    rgb: 0.8, 0.8, 0.8, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.02, 0.03
            pos_hint: {'top': 0.88, 'x': 0.69}

        Label:
            canvas:
                Color:
                    rgb: 0.2, 0.2, 0.2, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.3, 0.83
            pos_hint: {'x': 0}

        Label:
            canvas:
                Color:
                    rgb: 0.2, 0.2, 0.2, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.3, 0.83
            pos_hint: {'x': 0.7}

        Label:
            canvas:
                Color:
                    rgb: 0, 0, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.1
            pos_hint: {'x': 0}

        Label: 
            text: 'Multiplication Training'
            font_size: 20
            color: 0, 0, 0, 1
            size_hint: 1, 0.04
            text_size: self.size
            halign: 'left'
            valign: 'bottom'
            pos_hint: {'top': 1}

        Label:
            text: 'Minimum'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.95, 'x': 0.04}

        TextInput:
            id: add_min
            multiline: False
            text: '0'
            size_hint: 0.3, 0.05
            pos_hint: {'top': 0.95, 'x': 0.19}
            on_text:
                addproblem.text = func.prepare_data(min_=int(add_min.text), type_='*') if func.custom_min(min_=add_min.text) else func.error_message()

        Label:
            text: 'Maximum'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.95, 'x': 0.54}

        TextInput:
            id: add_max
            multiline: False
            text: '100'
            size_hint: 0.3, 0.05
            pos_hint: {'top': 0.95, 'x': 0.69}
            on_text:
                addproblem.text = func.prepare_data(max_=int(add_max.text), type_='*') if func.custom_max(max_=add_max.text) else func.error_message()
        
        Label:
            text: 'Decimals'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.89, 'x': 0.04}

        TextInput:
            id: add_deci
            multiline: False
            text: '0'
            size_hint: 0.3, 0.05
            pos_hint: {'top': 0.89, 'x': 0.19}
            on_text: 
                addproblem.text = func.prepare_data(deci=int(add_deci.text), type_='*') if func.custom_deci(deci=add_deci.text) else func.error_message()
            
        Label:
            text: 'Negatives'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.89, 'x': 0.54}

        CheckBox:
            id: add_negs
            size_hint: 0.02, 0.03
            pos_hint: {'top': 0.88, 'x': 0.69}
            on_active:
                addproblem.text = func.prepare_data(neg=add_negs.active, type_='*')
        
        Label:
            id: addproblem
            text: func.prepare_data(key=True, type_='*')
            font_size: 50
            size_hint: 0.4, 0.4
            pos_hint: {'top': 0.85, 'x': 0.29}
        
        TextInput:
            id: add_answer
            multiline: False
            size_hint: 0.4, 0.15
            pos_hint: {'top': 0.4, 'x': 0.3}
            on_text:
                addproblem.text, add_answer.text = func.prepare_data(type_='*') if func.answer(user_ans=add_answer.text, problem=addproblem.text) and add_answer.text != '' else addproblem.text, '' if func.answer(user_ans=add_answer.text, problem=addproblem.text) else add_answer.text

        Button:
            id: back_btn
            text: 'Home'
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if back_btn.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0}
            on_release:
                app.root.current = 'homescreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                add_answer.text = ''

        Button:
            id: fast_add
            text: '+'
            font_size: 40
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if fast_add.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0.7}
            on_release:
                app.root.current = 'addscreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                add_answer.text = ''

        Button:
            id: fast_sub
            text: '-'
            font_size: 30
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if fast_sub.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0.8}
            on_release:
                app.root.current = 'subscreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                add_answer.text = ''

        Button:
            id: fast_divi
            text: '/'
            font_size: 30
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if fast_divi.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0.9}
            on_release:
                app.root.current = 'divscreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                add_answer.text = ''


<DivisionScreen>:
    name: 'divscreen'

    FloatLayout:
        
        Label:
            canvas:
                Color:
                    rgb: 1, 0.5, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.04
            pos_hint: {'top': 1}

        Label:
            canvas:
                Color:
                    rgb: 0, 0, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.13
            pos_hint: {'top': 0.96}

        Label:
            canvas:
                Color:
                    rgb: 0.3, 0.3, 0.3, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.83
            pos_hint: {'top': 0.83}

        Label:
            canvas:
                Color:
                    rgb: 0.8, 0.8, 0.8, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.02, 0.03
            pos_hint: {'top': 0.88, 'x': 0.69}

        Label:
            canvas:
                Color:
                    rgb: 0.8, 0.8, 0.8, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.02, 0.03
            pos_hint: {'top': 0.88, 'x': 0.94}

        Label:
            canvas:
                Color:
                    rgb: 0.2, 0.2, 0.2, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.3, 0.83
            pos_hint: {'x': 0}

        Label:
            canvas:
                Color:
                    rgb: 0.2, 0.2, 0.2, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 0.3, 0.83
            pos_hint: {'x': 0.7}

        Label:
            canvas:
                Color:
                    rgb: 0, 0, 0, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            size_hint: 1, 0.1
            pos_hint: {'x': 0}

        Label: 
            text: 'Division Training'
            font_size: 20
            color: 0, 0, 0, 1
            size_hint: 1, 0.04
            text_size: self.size
            halign: 'left'
            valign: 'bottom'
            pos_hint: {'top': 1}

        Label:
            text: 'Minimum'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.95, 'x': 0.04}

        TextInput:
            id: add_min
            multiline: False
            text: '0'
            size_hint: 0.3, 0.05
            pos_hint: {'top': 0.95, 'x': 0.19}
            on_text:
                addproblem.text = func.prepare_data(min_=int(add_min.text), type_='//') if func.custom_min(min_=add_min.text) else func.error_message()

        Label:
            text: 'Maximum'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.95, 'x': 0.54}

        TextInput:
            id: add_max
            multiline: False
            text: '100'
            size_hint: 0.3, 0.05
            pos_hint: {'top': 0.95, 'x': 0.69}
            on_text:
                addproblem.text = func.prepare_data(max_=int(add_max.text), type_='//') if func.custom_max(max_=add_max.text) else func.error_message()
        
        Label:
            text: 'Decimals'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.89, 'x': 0.04}

        TextInput:
            id: add_deci
            multiline: False
            text: '0'
            size_hint: 0.3, 0.05
            pos_hint: {'top': 0.89, 'x': 0.19}
            on_text: 
                addproblem.text = func.prepare_data(deci=int(add_deci.text), type_='//') if func.custom_deci(deci=add_deci.text) else func.error_message()
                integersonly.active = False if func.custom_deci(deci=add_deci.text) and int(add_deci.text) > 0 else integersonly.active 
            
        Label:
            text: 'Negatives'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.89, 'x': 0.54}

        CheckBox:
            id: add_negs
            size_hint: 0.02, 0.03
            pos_hint: {'top': 0.88, 'x': 0.69}
            on_active:
                addproblem.text = func.prepare_data(neg=add_negs.active, type_='//')

        Label:
            text: 'Integers Only'
            size_hint: 0.1, 0.05
            pos_hint: {'top': 0.89, 'x': 0.79}

        CheckBox:
            id: integersonly
            size_hint: 0.02, 0.03
            pos_hint: {'top': 0.88, 'x': 0.94}
            active: 'down'
            on_active:
                addproblem.text = func.prepare_data(intonly=integersonly.active, type_='//')
                add_deci.text = '0' if integersonly.active == True else add_deci.text
        
        Label:
            id: addproblem
            text: func.prepare_data(key=True, type_='//')
            font_size: 50
            size_hint: 0.4, 0.4
            pos_hint: {'top': 0.85, 'x': 0.29}
        
        TextInput:
            id: add_answer
            multiline: False
            size_hint: 0.4, 0.15
            pos_hint: {'top': 0.4, 'x': 0.3}
            on_text:
                addproblem.text, add_answer.text = func.prepare_data(type_='//') if func.answer(user_ans=add_answer.text, problem=addproblem.text) and add_answer.text != '' else addproblem.text, '' if func.answer(user_ans=add_answer.text, problem=addproblem.text) else add_answer.text

        Button:
            id: back_btn
            text: 'Home'
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if back_btn.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0}
            on_release:
                app.root.current = 'homescreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                integersonly.active = True
                add_answer.text = ''

        Button:
            id: fast_add
            text: '+'
            font_size: 40
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if fast_add.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0.7}
            on_release:
                app.root.current = 'addscreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                integersonly.active = True
                add_answer.text = ''

        Button:
            id: fast_sub
            text: '-'
            font_size: 30
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if fast_sub.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0.8}
            on_release:
                app.root.current = 'subscreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                integersonly.active = True
                add_answer.text = ''

        Button:
            id: fast_mult
            text: 'x'
            font_size: 30
            color: 0, 0, 0, 1
            background_color: (10, 2, 0, 30) if fast_mult.state == 'normal' else (1, 1, 1, 30)
            size_hint: 0.1, 0.1
            pos_hint: {'x': 0.9}
            on_release:
                app.root.current = 'mulscreen'
                add_min.text = '0'
                add_max.text = '100'
                add_deci.text = '0'
                add_negs.active = False
                integersonly.active = True
                add_answer.text = ''
